import telebot
from telebot import types
from config import TELEGRAM_TOKEN, LANGUAGES, MAX_FILE_SIZE
import re
from utils import download_video, extract_audio, get_video_info
import os
import threading
from db import cache_request, get_cached, clear_old_cache
import time
import traceback

bot = telebot.TeleBot(TELEGRAM_TOKEN)

user_lang = {}

# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ YouTube-—Å—Å—ã–ª–∫–∏
YOUTUBE_REGEX = re.compile(r'(https?://)?(www\.)?(youtube\.com|youtu\.be)/.+')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ç–æ–∫–∏)
user_video_data = {}

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
LOCALES = {
    'ru': {
        'start': 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É!\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.',
        'help': '–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ñ–æ—Ä–º–∞—Ç. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ‚Äî 2 –ì–ë.',
        'lang': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'lang_set': '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π üá∑üá∫',
        'invalid_link': '–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube.',
        'no_quality': '–î–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.',
        'download_fail': '–°–±–æ–π –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        'analyze_fail': '–°–±–æ–π –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        'oversize': '–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 2 –ì–ë.',
        'session_expired': '–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.',
        'choose_quality': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ñ–æ—Ä–º–∞—Ç:',
        'downloading': '–ó–∞–≥—Ä—É–∑–∫–∞: {percent}%',
        'download_started': '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...'
    },
    'en': {
        'start': 'üëã Hi! I can help you download YouTube videos. Just send me a link!\nUse /help for more info.',
        'help': 'Send a YouTube video link. Then choose the desired quality and format. Max file size ‚Äî 2 GB.',
        'lang': 'Choose language:',
        'lang_set': 'Language set: English üá¨üáß',
        'invalid_link': 'Error: invalid YouTube link.',
        'no_quality': 'This quality is not available. Please choose from the list.',
        'download_fail': 'Download failed. Please try again later.',
        'analyze_fail': 'Failed to analyze video. Please try again later.',
        'oversize': 'Error: file exceeds 2 GB limit.',
        'session_expired': 'Session expired. Please send the link again.',
        'choose_quality': 'Choose quality and format:',
        'downloading': 'Downloading: {percent}%',
        'download_started': 'Download started...'
    }
}

def get_locale(message):
    return user_lang.get(message.from_user.id, 'ru')

@bot.message_handler(commands=['start'])
def start_message(message):
    lang = get_locale(message)
    bot.send_message(message.chat.id, LOCALES[lang]['start'])

@bot.message_handler(commands=['help'])
def help_message(message):
    lang = get_locale(message)
    bot.send_message(message.chat.id, LOCALES[lang]['help'])

@bot.message_handler(commands=['lang'])
def lang_message(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='lang_ru'))
    markup.add(types.InlineKeyboardButton('English üá¨üáß', callback_data='lang_en'))
    lang = get_locale(message)
    bot.send_message(message.chat.id, LOCALES[lang]['lang'], reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def callback_lang(call):
    lang_code = call.data.split('_')[1]
    user_lang[call.from_user.id] = lang_code
    bot.answer_callback_query(call.id, LOCALES[lang_code]['lang_set'])
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=LOCALES[lang_code]['lang_set'])

@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_youtube_link(message):
    lang = get_locale(message)
    url = message.text.strip()
    if not YOUTUBE_REGEX.match(url):
        bot.send_message(message.chat.id, LOCALES[lang]['invalid_link'])
        return
    try:
        video_info = get_video_info(url)
        qualities = video_info['video_qualities']
        has_audio = video_info['has_audio']
        
        if not qualities and not has_audio:
            bot.send_message(message.chat.id, LOCALES[lang]['no_quality'])
            return
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ MP4
        for quality in qualities:
            buttons.append(types.InlineKeyboardButton(f'{quality} MP4', callback_data=f'video_{quality}_mp4'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ WebM (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - yt-dlp —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç)
        for quality in qualities[:3]:  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-3 –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è WebM
            buttons.append(types.InlineKeyboardButton(f'{quality} WebM', callback_data=f'video_{quality}_webm'))
        
        # –ê—É–¥–∏–æ
        if has_audio:
            buttons.append(types.InlineKeyboardButton('MP3 (–∞—É–¥–∏–æ)', callback_data='audio_mp3'))
        
        markup.add(*buttons)
        user_video_data[message.from_user.id] = {'url': url}
        bot.send_message(message.chat.id, LOCALES[lang]['choose_quality'], reply_markup=markup)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, LOCALES[lang]['analyze_fail'])

def send_progress(chat_id, msg_id, percent, lang):
    try:
        bot.edit_message_text(LOCALES[lang]['downloading'].format(percent=percent), chat_id, msg_id)
    except:
        pass

def download_and_send(user_id, chat_id, url, choice, message_id, lang):
    filename = None
    cache_key = f'{choice}'
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    cached = get_cached(user_id, url + cache_key)
    if cached and os.path.exists(cached):
        try:
            bot.edit_message_text(LOCALES[lang]['downloading'].format(percent=100), chat_id, message_id)
            with open(cached, 'rb') as f:
                bot.send_document(chat_id, f, visible_file_name=os.path.basename(cached))
            return
        except Exception as e:
            print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', e)
    try:
        if choice.startswith('video_'):
            _, res, ext = choice.split('_')
            filename, filesize = download_video(url, res, ext, lambda p: send_progress(chat_id, message_id, p, lang))
        elif choice == 'audio_mp3':
            filename, filesize = extract_audio(url, lambda p: send_progress(chat_id, message_id, p, lang))
        else:
            bot.send_message(chat_id, LOCALES[lang]['no_quality'])
            return
        if filesize > MAX_FILE_SIZE * 1024 * 1024:
            bot.send_message(chat_id, LOCALES[lang]['oversize'])
            os.remove(filename)
            return
        with open(filename, 'rb') as f:
            bot.send_document(chat_id, f, visible_file_name=os.path.basename(filename))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∫—ç—à (–Ω–∞ 1 —á–∞—Å)
        cache_request(user_id, url + cache_key, filename)
        # –ï—Å–ª–∏ –∫—ç—à –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(filename)
    except Exception as e:
        print(e)
        bot.send_message(chat_id, LOCALES[lang]['download_fail'])
        try:
            if filename and os.path.exists(filename):
                os.remove(filename)
        except:
            pass

@bot.callback_query_handler(func=lambda call: call.data.startswith('video_') or call.data == 'audio_mp3')
def handle_quality_choice(call):
    user_id = call.from_user.id
    lang = get_locale(call)
    data = user_video_data.get(user_id)
    if not data:
        bot.answer_callback_query(call.id, LOCALES[lang]['session_expired'])
        return
    url = data['url']
    choice = call.data
    msg = bot.send_message(call.message.chat.id, LOCALES[lang]['downloading'].format(percent=0))
    bot.answer_callback_query(call.id, LOCALES[lang]['download_started'])
    threading.Thread(target=download_and_send, args=(user_id, call.message.chat.id, url, choice, msg.message_id, lang)).start()

def clear_cache_files_and_db():
    while True:
        clear_old_cache(86400)  # 1 –¥–µ–Ω—å
        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫—ç—à–∞
        from db import conn
        c = conn.cursor()
        ts = int(time.time())
        c.execute('SELECT result, timestamp FROM cache')
        for row in c.fetchall():
            filename, file_ts = row
            if ts - file_ts > 86400 and filename and os.path.exists(filename):
                try:
                    os.remove(filename)
                except Exception as e:
                    print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ –∫—ç—à–∞:', e)
        time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏
threading.Thread(target=clear_cache_files_and_db, daemon=True).start()

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True) 